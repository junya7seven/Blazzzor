@inject ISnackbar Snackbar
@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        <MudText>Введите данные для нового пользователя:</MudText>
        @for (int i = 0; i < userProp.Count; i++)
        {
            var propertyName = userProp[i];
            var propertyValue = User.GetType().GetProperty(propertyName)?.GetValue(User);

            <MudTextField @bind-Value="propertyValues[propertyName]"
                          Label="@propertyName"
                          Required="true" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Close">Отмена</MudButton>
        <MudButton OnClick="@Save">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public RegistrationUser User { get; set; } = new RegistrationUser();

    List<string> userProp { get; set; } = new List<string>();

    Dictionary<string, string> propertyValues { get; set; } = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        GetUserProp();

        foreach (var prop in userProp)
        {
            var value = User.GetType().GetProperty(prop)?.GetValue(User)?.ToString();
            propertyValues[prop] = value;
        }
    }

    private void GetUserProp()
    {
        Type userDTO = typeof(RegistrationUser);
        PropertyInfo[] prop = userDTO.GetProperties();

        foreach (var item in prop)
        {
            userProp.Add(item.Name);
        }
    }

    private void Close() => MudDialog.Cancel();

    private async Task Save()
    {
        foreach (var key in propertyValues.Keys)
        {
            var propertyInfo = User.GetType().GetProperty(key);
            if (propertyInfo != null && propertyInfo.CanWrite)
            {
                if (propertyInfo.PropertyType == typeof(string))
                {
                    propertyInfo.SetValue(User, propertyValues[key]);
                }
                else if (propertyInfo.PropertyType == typeof(int) && int.TryParse(propertyValues[key], out int intVal))
                {
                    propertyInfo.SetValue(User, intVal);
                }
            }
        }
        await AddUser();
    }

    private async Task AddUser()
    {
        var response = await httpClient.PostAsJsonAsync("User", User);
        if (response.IsSuccessStatusCode)
        {
            StateHasChanged();
            Snackbar.Add("Пользователь успешно добавлен!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(User));
            return;
        }
        var error = await response.Content.ReadAsStringAsync();
        Snackbar.Add(error, Severity.Error);
        MudDialog.Close();
    }
}
