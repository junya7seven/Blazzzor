@page "/"
@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<PageTitle>Registration</PageTitle>

<h1>Registration</h1>

<EditForm Model="@User" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    @foreach (var propertyName in userProp)
                    {
                        var propertyValue = User.GetType().GetProperty(propertyName)?.GetValue(User);
                        <MudTextField Label="@propertyName"
                                      @bind-Value="propertyValue" />
         
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    bool success;



    private async Task OnValidSubmit()
    {
        await AddUser();

        success = true;



        StateHasChanged();
    }

    public RegistrationUser User { get; set; } = new RegistrationUser();

    List<string> userProp { get; set; } = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        GetUserProp();

        
    }

    private void GetUserProp()
    {
        Type userDTO = typeof(RegistrationUser);
        PropertyInfo[] prop = userDTO.GetProperties();

        foreach (var item in prop)
        {
            userProp.Add(item.Name);
        }
    }




    private async Task AddUser()
    {
        var response = await httpClient.PostAsJsonAsync("Auth/Registration", User); 
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Пользователь успешно зарегистрирован!", Severity.Success);
            return;
        }

        var error = await response.Content.ReadAsStringAsync();
        Snackbar.Add(error, Severity.Error);
    }


}