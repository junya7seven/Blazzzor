@inject ISnackbar Snackbar
@inject HttpClient httpClient


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Block" Color="Color.Error" Class="mr-3 mb-n1" />
            Блокировка
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="Days" Label="Days" ReadOnly="false" />
        <MudTextField @bind-Value="Hours" Label="Hours" ReadOnly="false" />
        <MudCheckBox @bind-Value="Default" Color="Color.Secondary">Блокировать навсегда</MudCheckBox>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отменить</MudButton>
        <MudButton Color="Color.Success" OnClick="UnBlockUser">Разблокировать</MudButton>
        <MudButton Color="Color.Error" OnClick="BlockUser">Заблокировать</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public UserDTO User { get; set; } = new UserDTO();


    public bool Default { get; set; } = false;
    public int Hours { get; set; } = 0;
    public int Days { get; set; } = 7;

    private void Cancel() => MudDialog.Cancel();

    private async Task BlockUser()
    {
        int time = 0;
        bool result;

        if (Default)
        {
            var response = await httpClient.PostAsync($"User/Block/{User.UserId}/{0}", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Пользователь заблокирован", Severity.Success);
                MudDialog.Close(DialogResult.Ok(User));
                return;
            }
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add(error, Severity.Error);
            MudDialog.Close();
            return;
        }
        else
        {
            time = Days * 24 + Hours;
            var response = await httpClient.PostAsync($"User/Block/{User.UserId}/{time}", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Пользователь заблокирован", Severity.Success);
                MudDialog.Close(DialogResult.Ok(User));
                return;
            }
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add(error, Severity.Error);
            MudDialog.Close();
            return;
        }
    }
    private async Task UnBlockUser()
    {
        var response = await httpClient.PostAsync($"User/UnBlock/{User.UserId}", null);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Пользователь разблокирован", Severity.Success);
            MudDialog.Close(DialogResult.Ok(User));
            return;
        }
        var error = await response.Content.ReadAsStringAsync();
        Snackbar.Add(error, Severity.Error);
        MudDialog.Close();
        return;
    }
}
