@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Block" Color="Color.Error" Class="mr-3 mb-n1" />
            Блокировка
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudDatePicker Label="Flexible Date" Editable="true" Date="duration" ImmediateText="true" Placeholder="day.month.year" DateFormat="@_dateFormat" TextChanged="DatePickerTextChanged" HelperText="@_bound" Clearable="true" />
        <MudCheckBox @bind-Value="Default" Color="Color.Secondary">Блокировать навсегда</MudCheckBox>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отменить</MudButton>
        <MudButton Color="Color.Success" OnClick="UnBlockUser">Разблокировать</MudButton>
        <MudButton Color="Color.Error" OnClick="BlockUser">Заблокировать</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public UserDTO User { get; set; } = new UserDTO();

    private DateTime? duration = DateTime.Now;
    private string _dateFormat = "dd.MM.yyyy";
    private string _bound = "not set";


    public bool Default { get; set; } = false;
    private ErrorResponse errorResponse;

    private void Cancel() => MudDialog.Cancel();

    private async Task BlockUser()
    {
        try
        {
            if (duration <= DateTime.Now && Default == false)
            {
                Snackbar.Add($"Ошибка при блокировке пользователя: дата не может быть прошлым.", Severity.Error);
                MudDialog.Close(DialogResult.Ok(User));
                return;
            }


            var response = await httpClient.PostAsync($"User/block/{User.UserId}/{duration.Value.ToString("yyyy-MM-ddTHH:mm:ss")}", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Пользователь заблокирован", Severity.Success);
                MudDialog.Close(DialogResult.Ok(User));
            }
            else
            {
                Snackbar.Add($"Ошибка при блокировке пользователя: {errorResponse.ErrorMessage}", Severity.Error);
                MudDialog.Close(DialogResult.Ok(User));
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Ошибка сети: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Произошла ошибка: {ex.Message}", Severity.Error);
        }
    }
    private async Task UnBlockUser()
    {
        try
        {
            var response = await httpClient.PostAsync($"User/unblock/{User.UserId}", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Пользователь разблокирован", Severity.Success);
                MudDialog.Close(DialogResult.Ok(User));
            }
            else
            {
                errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                Snackbar.Add($"Ошибка при разблокировки пользователя: {errorResponse.ErrorMessage}", Severity.Error);
                MudDialog.Close(DialogResult.Ok(User));
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Ошибка сети: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Произошла ошибка: {ex.Message}", Severity.Error);
        }
    }
    private void DatePickerTextChanged(string value)
    {
        if (value == null || value.Length < 6)
        {
            duration = null;
        }
        else
        {
            string[] formats = { "ddMMyy", "dd.MM.yyyy", "dd.M.yyyy", "d.MM.yyyy", "d.M.yyyy", "dd.MM.yy", "dd.M.yy", "d.MM.yy", "d.M.yy" };
            if (DateTime.TryParseExact(value, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime validDate))
            {
                duration = validDate;
            }
            else
            {
                duration = null;
            }
        }

        if (duration.HasValue)
        {
            _bound = duration.Value.ToString(_dateFormat);
        }
        else
        {
            _bound = "not set";
        }
    }
}
