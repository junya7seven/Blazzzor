@inject ISnackbar Snackbar
@inject HttpClient httpClient

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Block" Color="Color.Error" Class="mr-3 mb-n1" />
            Блокировка
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="Days" Label="Дни" ReadOnly="@Default" />
        <MudTextField @bind-Value="Hours" Label="Часы" ReadOnly="@Default" />
        <MudCheckBox @bind-Value="Default" Color="Color.Secondary">Блокировать навсегда</MudCheckBox>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отменить</MudButton>
        <MudButton Color="Color.Success" OnClick="UnBlockUser">Разблокировать</MudButton>
        <MudButton Color="Color.Error" OnClick="BlockUser">Заблокировать</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public UserDTO User { get; set; } = new UserDTO();

    public bool Default { get; set; } = false;
    public int Hours { get; set; } = 0;
    public int Days { get; set; } = 7;
    private ErrorResponse errorResponse;

    private void Cancel() => MudDialog.Cancel();

    private async Task BlockUser()
    {
        try
        {
            int time = 0;
            if (!Default)
            {
                time = Days * 24 + Hours;
            }

            var response = await httpClient.PostAsync($"User/Block/{User.UserId}/{time}", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Пользователь заблокирован", Severity.Success);
                MudDialog.Close(DialogResult.Ok(User));
            }
            else
            {
                errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                Snackbar.Add($"Ошибка при блокировке пользователя: {errorResponse.ErrorMessage}", Severity.Error);
                MudDialog.Close(DialogResult.Ok(User));
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Ошибка сети: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Произошла ошибка: {ex.Message}", Severity.Error);
        }
    }
    private async Task UnBlockUser()
    {
        try
        {
            var response = await httpClient.PostAsync($"User/UnBlock/{User.UserId}", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Пользователь разблокирован", Severity.Success);
                MudDialog.Close(DialogResult.Ok(User));
            }
            else
            {
                errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                Snackbar.Add($"Ошибка при разблокировки пользователя: {errorResponse.ErrorMessage}", Severity.Error);
                MudDialog.Close(DialogResult.Ok(User));
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Ошибка сети: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Произошла ошибка: {ex.Message}", Severity.Error);
        }
    }
    private void HandleDefaultChange(bool value)
    {
        Default = value;
        if (Default)
        {
            Days = 0;
            Hours = 0;
        }
    }
}
