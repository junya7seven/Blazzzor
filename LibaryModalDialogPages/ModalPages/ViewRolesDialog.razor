@inject ISnackbar Snackbar
@inject HttpClient httpClient



<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.ViewArray" Class="mr-3 mb-n1" />
            Роли
        </MudText>
    </TitleContent>
    <DialogContent>
        @foreach (var key in roles.Keys.ToList())
        {
            <MudCheckBox @bind-Value="roles[key]" Color="Color.Success">@key</MudCheckBox>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="Accept">Accept</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }


    public Dictionary<string, bool> roles { get; set; } = new Dictionary<string, bool>();

    [Parameter]
    public UserDTO User { get; set; } = new UserDTO();



    protected override async Task OnInitializedAsync()
    {
        await GetAllRoles();
        foreach (var role in User.Roles)
        {
            if (roles.ContainsKey(role.Name.ToLower()))
            {
                roles[role.Name.ToLower()] = true;
            }
        }
    }
    private void Cancel() => MudDialog.Cancel();
    private async Task Accept()
    {
        var response = await httpClient.PostAsJsonAsync($"UserRole/AddRange/{User.UserId}", roles);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Роли изменены!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(roles));
            return;
        }
        var error = await response.Content.ReadAsStringAsync();
        Snackbar.Add(error, Severity.Error);
        MudDialog.Close();
    }
    private async Task GetAllRoles()
    {
        var response = await httpClient.GetAsync($"UserRole");
        var role = await response.Content.ReadFromJsonAsync<List<Role>>();
        foreach (var item in role)
        {
            roles[item.Name.ToLower()] = false;
        }
    }
}
