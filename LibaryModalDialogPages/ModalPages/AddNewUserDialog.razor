
@inject ISnackbar Snackbar
@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        <MudText>Введите данные для нового пользователя:</MudText>
        <EditForm Model="@userProp" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @foreach (var propertyName in userProp)
            {
                <MudTextField Label="@propertyName"
                              @bind-Value="propertyValues[propertyName]" For="@(() => propertyValues[propertyName])"
                              Required="true" />
            }
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Close">Отмена</MudButton>
        <MudButton OnClick="@Save">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    public RegistrationUser User { get; set; } = new RegistrationUser();

    private IEnumerable<string> userProp { get; set; }

    Dictionary<string, string> propertyValues { get; set; } = new Dictionary<string, string>();

    bool success;

    protected override async Task OnInitializedAsync()
    {
        GetUserProp();

        foreach (var prop in userProp)
        {
            var value = User.GetType().GetProperty(prop)?.GetValue(User)?.ToString();
            propertyValues[prop] = value;
        }
    }

    private void GetUserProp()
    {
        var properties = typeof(RegistrationUser).GetProperties();

        userProp = properties.Select(p => p.Name);

        foreach (var prop in properties)
        {
            if (!propertyValues.ContainsKey(prop.Name))
                propertyValues[prop.Name] = null;
        }
    }

    private void Close() => MudDialog.Cancel();


    private async Task Save()
    {
        foreach (var key in propertyValues.Keys)
        {
            SetPropertyValue(key);
        }
        await AddUser();
    }

    private void SetPropertyValue(string key)
    {
        if (key == null)
            return;
        var propertyInfo = User.GetType().GetProperty(key);
        if (propertyInfo != null && propertyInfo.CanWrite)
        {

            if (propertyInfo.PropertyType == typeof(string))
            {
                propertyInfo.SetValue(User, propertyValues[key]);
            }
            else if (propertyInfo.PropertyType == typeof(int) && int.TryParse(propertyValues[key], out int intVal))
            {
                propertyInfo.SetValue(User, intVal);
            }
        }
    }

    private async Task AddUser()
    {
        var response = await httpClient.PostAsJsonAsync("User", User);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Пользователь успешно добавлен!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(User));
            StateHasChanged();
            return;
        }
        var error = await response.Content.ReadAsStringAsync();
        Snackbar.Add(error, Severity.Error);
        MudDialog.Close();
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}
